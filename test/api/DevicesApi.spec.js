/**
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JavascriptMsxSdk);
  }
}(this, function(expect, JavascriptMsxSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JavascriptMsxSdk.DevicesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DevicesApi', function() {
    describe('attachDeviceTemplates', function() {
      it('should call attachDeviceTemplates successfully', function(done) {
        //uncomment below and update the code to test attachDeviceTemplates
        //instance.attachDeviceTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchAttachDeviceTemplates', function() {
      it('should call batchAttachDeviceTemplates successfully', function(done) {
        //uncomment below and update the code to test batchAttachDeviceTemplates
        //instance.batchAttachDeviceTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDevice', function() {
      it('should call createDevice successfully', function(done) {
        //uncomment below and update the code to test createDevice
        //instance.createDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDevice', function() {
      it('should call deleteDevice successfully', function(done) {
        //uncomment below and update the code to test deleteDevice
        //instance.deleteDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detachDeviceTemplate', function() {
      it('should call detachDeviceTemplate successfully', function(done) {
        //uncomment below and update the code to test detachDeviceTemplate
        //instance.detachDeviceTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detachDeviceTemplates', function() {
      it('should call detachDeviceTemplates successfully', function(done) {
        //uncomment below and update the code to test detachDeviceTemplates
        //instance.detachDeviceTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDevice', function() {
      it('should call getDevice successfully', function(done) {
        //uncomment below and update the code to test getDevice
        //instance.getDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeviceConfig', function() {
      it('should call getDeviceConfig successfully', function(done) {
        //uncomment below and update the code to test getDeviceConfig
        //instance.getDeviceConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeviceTemplateHistory', function() {
      it('should call getDeviceTemplateHistory successfully', function(done) {
        //uncomment below and update the code to test getDeviceTemplateHistory
        //instance.getDeviceTemplateHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDevicesPage', function() {
      it('should call getDevicesPage successfully', function(done) {
        //uncomment below and update the code to test getDevicesPage
        //instance.getDevicesPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchDevice', function() {
      it('should call patchDevice successfully', function(done) {
        //uncomment below and update the code to test patchDevice
        //instance.patchDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redeployDevice', function() {
      it('should call redeployDevice successfully', function(done) {
        //uncomment below and update the code to test redeployDevice
        //instance.redeployDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDevice', function() {
      it('should call updateDevice successfully', function(done) {
        //uncomment below and update the code to test updateDevice
        //instance.updateDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDeviceTemplates', function() {
      it('should call updateDeviceTemplates successfully', function(done) {
        //uncomment below and update the code to test updateDeviceTemplates
        //instance.updateDeviceTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
