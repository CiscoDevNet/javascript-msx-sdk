/**
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceComplianceState from './DeviceComplianceState';
import DevicePatch from './DevicePatch';
import DeviceUpdateAllOf from './DeviceUpdateAllOf';

/**
 * The DeviceUpdate model module.
 * @module model/DeviceUpdate
 * @version 1.0.9
 */
class DeviceUpdate {
    /**
     * Constructs a new <code>DeviceUpdate</code>.
     * @alias module:model/DeviceUpdate
     * @implements module:model/DeviceUpdateAllOf
     * @implements module:model/DevicePatch
     * @param managed {Boolean} 
     * @param onboardType {String} 
     * @param name {String} 
     * @param model {String} 
     * @param type {String} 
     */
    constructor(managed, onboardType, name, model, type) { 
        DeviceUpdateAllOf.initialize(this, managed, onboardType);DevicePatch.initialize(this);
        DeviceUpdate.initialize(this, managed, onboardType, name, model, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, managed, onboardType, name, model, type) { 
        obj['managed'] = managed || false;
        obj['onboardType'] = onboardType;
        obj['name'] = name;
        obj['model'] = model;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>DeviceUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceUpdate} obj Optional instance to populate.
     * @return {module:model/DeviceUpdate} The populated <code>DeviceUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceUpdate();
            DeviceUpdateAllOf.constructFromObject(data, obj);
            DevicePatch.constructFromObject(data, obj);

            if (data.hasOwnProperty('serviceType')) {
                obj['serviceType'] = ApiClient.convertToType(data['serviceType'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('managed')) {
                obj['managed'] = ApiClient.convertToType(data['managed'], 'Boolean');
            }
            if (data.hasOwnProperty('onboardType')) {
                obj['onboardType'] = ApiClient.convertToType(data['onboardType'], 'String');
            }
            if (data.hasOwnProperty('onboardInformation')) {
                obj['onboardInformation'] = ApiClient.convertToType(data['onboardInformation'], {'String': Object});
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': Object});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('subType')) {
                obj['subType'] = ApiClient.convertToType(data['subType'], 'String');
            }
            if (data.hasOwnProperty('serialKey')) {
                obj['serialKey'] = ApiClient.convertToType(data['serialKey'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('complianceState')) {
                obj['complianceState'] = DeviceComplianceState.constructFromObject(data['complianceState']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} serviceType
 */
DeviceUpdate.prototype['serviceType'] = undefined;

/**
 * @member {Object.<String, String>} tags
 */
DeviceUpdate.prototype['tags'] = undefined;

/**
 * @member {Boolean} managed
 * @default false
 */
DeviceUpdate.prototype['managed'] = false;

/**
 * @member {String} onboardType
 */
DeviceUpdate.prototype['onboardType'] = undefined;

/**
 * @member {Object.<String, Object>} onboardInformation
 */
DeviceUpdate.prototype['onboardInformation'] = undefined;

/**
 * @member {Object.<String, Object>} attributes
 */
DeviceUpdate.prototype['attributes'] = undefined;

/**
 * @member {String} name
 */
DeviceUpdate.prototype['name'] = undefined;

/**
 * @member {String} model
 */
DeviceUpdate.prototype['model'] = undefined;

/**
 * @member {String} type
 */
DeviceUpdate.prototype['type'] = undefined;

/**
 * @member {String} subType
 */
DeviceUpdate.prototype['subType'] = undefined;

/**
 * @member {String} serialKey
 */
DeviceUpdate.prototype['serialKey'] = undefined;

/**
 * @member {String} version
 */
DeviceUpdate.prototype['version'] = undefined;

/**
 * @member {module:model/DeviceComplianceState} complianceState
 */
DeviceUpdate.prototype['complianceState'] = undefined;


// Implement DeviceUpdateAllOf interface:
/**
 * @member {String} serviceType
 */
DeviceUpdateAllOf.prototype['serviceType'] = undefined;
/**
 * @member {Object.<String, String>} tags
 */
DeviceUpdateAllOf.prototype['tags'] = undefined;
/**
 * @member {Boolean} managed
 * @default false
 */
DeviceUpdateAllOf.prototype['managed'] = false;
/**
 * @member {String} onboardType
 */
DeviceUpdateAllOf.prototype['onboardType'] = undefined;
/**
 * @member {Object.<String, Object>} onboardInformation
 */
DeviceUpdateAllOf.prototype['onboardInformation'] = undefined;
/**
 * @member {Object.<String, Object>} attributes
 */
DeviceUpdateAllOf.prototype['attributes'] = undefined;
// Implement DevicePatch interface:
/**
 * @member {String} name
 */
DevicePatch.prototype['name'] = undefined;
/**
 * @member {String} model
 */
DevicePatch.prototype['model'] = undefined;
/**
 * @member {String} type
 */
DevicePatch.prototype['type'] = undefined;
/**
 * @member {String} subType
 */
DevicePatch.prototype['subType'] = undefined;
/**
 * @member {String} serialKey
 */
DevicePatch.prototype['serialKey'] = undefined;
/**
 * @member {String} version
 */
DevicePatch.prototype['version'] = undefined;
/**
 * @member {module:model/DeviceComplianceState} complianceState
 */
DevicePatch.prototype['complianceState'] = undefined;




export default DeviceUpdate;

