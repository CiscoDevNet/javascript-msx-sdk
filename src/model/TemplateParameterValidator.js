/**
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TemplateParameterValidator model module.
 * @module model/TemplateParameterValidator
 * @version 1.0.9
 */
class TemplateParameterValidator {
    /**
     * Constructs a new <code>TemplateParameterValidator</code>.
     * It&#39;s metadata about a parameter for use in the UI.  A name to put on the field, a type so it can be validated (e.g. an IP address or an integer value, or list of allowed values for an enumeration/list).
     * @alias module:model/TemplateParameterValidator
     */
    constructor() { 
        
        TemplateParameterValidator.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TemplateParameterValidator</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TemplateParameterValidator} obj Optional instance to populate.
     * @return {module:model/TemplateParameterValidator} The populated <code>TemplateParameterValidator</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateParameterValidator();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('hintText')) {
                obj['hintText'] = ApiClient.convertToType(data['hintText'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('displayType')) {
                obj['displayType'] = ApiClient.convertToType(data['displayType'], 'String');
            }
            if (data.hasOwnProperty('allowedValues')) {
                obj['allowedValues'] = ApiClient.convertToType(data['allowedValues'], ['String']);
            }
            if (data.hasOwnProperty('toolTipText')) {
                obj['toolTipText'] = ApiClient.convertToType(data['toolTipText'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} name
 */
TemplateParameterValidator.prototype['name'] = undefined;

/**
 * @member {String} hintText
 */
TemplateParameterValidator.prototype['hintText'] = undefined;

/**
 * @member {String} label
 */
TemplateParameterValidator.prototype['label'] = undefined;

/**
 * @member {String} type
 */
TemplateParameterValidator.prototype['type'] = undefined;

/**
 * @member {String} displayType
 */
TemplateParameterValidator.prototype['displayType'] = undefined;

/**
 * @member {Array.<String>} allowedValues
 */
TemplateParameterValidator.prototype['allowedValues'] = undefined;

/**
 * @member {String} toolTipText
 */
TemplateParameterValidator.prototype['toolTipText'] = undefined;






export default TemplateParameterValidator;

