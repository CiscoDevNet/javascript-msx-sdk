/**
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceComplianceState from './DeviceComplianceState';

/**
 * The DevicePatch model module.
 * @module model/DevicePatch
 * @version 1.0.9
 */
class DevicePatch {
    /**
     * Constructs a new <code>DevicePatch</code>.
     * @alias module:model/DevicePatch
     */
    constructor() { 
        
        DevicePatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DevicePatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DevicePatch} obj Optional instance to populate.
     * @return {module:model/DevicePatch} The populated <code>DevicePatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DevicePatch();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('subType')) {
                obj['subType'] = ApiClient.convertToType(data['subType'], 'String');
            }
            if (data.hasOwnProperty('serialKey')) {
                obj['serialKey'] = ApiClient.convertToType(data['serialKey'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('complianceState')) {
                obj['complianceState'] = DeviceComplianceState.constructFromObject(data['complianceState']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} name
 */
DevicePatch.prototype['name'] = undefined;

/**
 * @member {String} model
 */
DevicePatch.prototype['model'] = undefined;

/**
 * @member {String} type
 */
DevicePatch.prototype['type'] = undefined;

/**
 * @member {String} subType
 */
DevicePatch.prototype['subType'] = undefined;

/**
 * @member {String} serialKey
 */
DevicePatch.prototype['serialKey'] = undefined;

/**
 * @member {String} version
 */
DevicePatch.prototype['version'] = undefined;

/**
 * @member {module:model/DeviceComplianceState} complianceState
 */
DevicePatch.prototype['complianceState'] = undefined;






export default DevicePatch;

