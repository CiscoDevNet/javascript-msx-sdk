/**
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceUpdateAllOf model module.
 * @module model/DeviceUpdateAllOf
 * @version 1.0.9
 */
class DeviceUpdateAllOf {
    /**
     * Constructs a new <code>DeviceUpdateAllOf</code>.
     * @alias module:model/DeviceUpdateAllOf
     * @param managed {Boolean} 
     * @param onboardType {String} 
     */
    constructor(managed, onboardType) { 
        
        DeviceUpdateAllOf.initialize(this, managed, onboardType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, managed, onboardType) { 
        obj['managed'] = managed || false;
        obj['onboardType'] = onboardType;
    }

    /**
     * Constructs a <code>DeviceUpdateAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceUpdateAllOf} obj Optional instance to populate.
     * @return {module:model/DeviceUpdateAllOf} The populated <code>DeviceUpdateAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceUpdateAllOf();

            if (data.hasOwnProperty('serviceType')) {
                obj['serviceType'] = ApiClient.convertToType(data['serviceType'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('managed')) {
                obj['managed'] = ApiClient.convertToType(data['managed'], 'Boolean');
            }
            if (data.hasOwnProperty('onboardType')) {
                obj['onboardType'] = ApiClient.convertToType(data['onboardType'], 'String');
            }
            if (data.hasOwnProperty('onboardInformation')) {
                obj['onboardInformation'] = ApiClient.convertToType(data['onboardInformation'], {'String': Object});
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': Object});
            }
        }
        return obj;
    }


}

/**
 * @member {String} serviceType
 */
DeviceUpdateAllOf.prototype['serviceType'] = undefined;

/**
 * @member {Object.<String, String>} tags
 */
DeviceUpdateAllOf.prototype['tags'] = undefined;

/**
 * @member {Boolean} managed
 * @default false
 */
DeviceUpdateAllOf.prototype['managed'] = false;

/**
 * @member {String} onboardType
 */
DeviceUpdateAllOf.prototype['onboardType'] = undefined;

/**
 * @member {Object.<String, Object>} onboardInformation
 */
DeviceUpdateAllOf.prototype['onboardInformation'] = undefined;

/**
 * @member {Object.<String, Object>} attributes
 */
DeviceUpdateAllOf.prototype['attributes'] = undefined;






export default DeviceUpdateAllOf;

