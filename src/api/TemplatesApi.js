/**
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Template from '../model/Template';
import TemplateCreate from '../model/TemplateCreate';
import TemplatePatch from '../model/TemplatePatch';
import TemplatesPage from '../model/TemplatesPage';

/**
* Templates service.
* @module api/TemplatesApi
* @version 1.0.9
*/
export default class TemplatesApi {

    /**
    * Constructs a new TemplatesApi. 
    * @alias module:api/TemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Deletes a template.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTemplateWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTemplate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/template/api/v8/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a template.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTemplate(id) {
      return this.deleteTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a template by id.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Template} and HTTP response
     */
    getTemplateWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTemplate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Template;
      return this.apiClient.callApi(
        '/template/api/v8/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a template by id.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Template}
     */
    getTemplate(id) {
      return this.getTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a template history by id.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Template>} and HTTP response
     */
    getTemplateHistoryWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTemplateHistory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Template];
      return this.apiClient.callApi(
        '/template/api/v8/templates/{id}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a template history by id.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Template>}
     */
    getTemplateHistory(id) {
      return this.getTemplateHistoryWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a page of templates.
     * @param {Number} page 
     * @param {Number} pageSize 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.calculateTotalItems 
     * @param {String} opts.externalId External ID to filter templates by.
     * @param {String} opts.service Name of service to filter templates by.
     * @param {Array.<String>} opts.tags 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplatesPage} and HTTP response
     */
    getTemplatesPageWithHttpInfo(page, pageSize, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getTemplatesPage");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling getTemplatesPage");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': page,
        'pageSize': pageSize,
        'calculateTotalItems': opts['calculateTotalItems'],
        'externalId': opts['externalId'],
        'service': opts['service'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplatesPage;
      return this.apiClient.callApi(
        '/template/api/v8/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a page of templates.
     * @param {Number} page 
     * @param {Number} pageSize 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.calculateTotalItems 
     * @param {String} opts.externalId External ID to filter templates by.
     * @param {String} opts.service Name of service to filter templates by.
     * @param {Array.<String>} opts.tags 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplatesPage}
     */
    getTemplatesPage(page, pageSize, opts) {
      return this.getTemplatesPageWithHttpInfo(page, pageSize, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Imports a template.
     * @param {module:model/TemplateCreate} templateCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Template} and HTTP response
     */
    importTemplateWithHttpInfo(templateCreate) {
      let postBody = templateCreate;
      // verify the required parameter 'templateCreate' is set
      if (templateCreate === undefined || templateCreate === null) {
        throw new Error("Missing the required parameter 'templateCreate' when calling importTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Template;
      return this.apiClient.callApi(
        '/template/api/v8/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Imports a template.
     * @param {module:model/TemplateCreate} templateCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Template}
     */
    importTemplate(templateCreate) {
      return this.importTemplateWithHttpInfo(templateCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a template status.
     * @param {String} id 
     * @param {module:model/TemplatePatch} templatePatch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Template} and HTTP response
     */
    updateTemplateStatusWithHttpInfo(id, templatePatch) {
      let postBody = templatePatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTemplateStatus");
      }
      // verify the required parameter 'templatePatch' is set
      if (templatePatch === undefined || templatePatch === null) {
        throw new Error("Missing the required parameter 'templatePatch' when calling updateTemplateStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Template;
      return this.apiClient.callApi(
        '/template/api/v8/templates/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a template status.
     * @param {String} id 
     * @param {module:model/TemplatePatch} templatePatch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Template}
     */
    updateTemplateStatus(id, templatePatch) {
      return this.updateTemplateStatusWithHttpInfo(id, templatePatch)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
