/**
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import LicenseSummary from '../model/LicenseSummary';

/**
* LicensingLicenses service.
* @module api/LicensingLicensesApi
* @version 1.0.9
*/
export default class LicensingLicensesApi {

    /**
    * Constructs a new LicensingLicensesApi. 
    * @alias module:api/LicensingLicensesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns a filtered list of licenses.
     * @param {String} smartAccountId Smart Account Identifier
     * @param {String} virtualAccountId Virtual Account Identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LicenseSummary>} and HTTP response
     */
    getLicensesListWithHttpInfo(smartAccountId, virtualAccountId) {
      let postBody = null;
      // verify the required parameter 'smartAccountId' is set
      if (smartAccountId === undefined || smartAccountId === null) {
        throw new Error("Missing the required parameter 'smartAccountId' when calling getLicensesList");
      }
      // verify the required parameter 'virtualAccountId' is set
      if (virtualAccountId === undefined || virtualAccountId === null) {
        throw new Error("Missing the required parameter 'virtualAccountId' when calling getLicensesList");
      }

      let pathParams = {
      };
      let queryParams = {
        'smartAccountId': smartAccountId,
        'virtualAccountId': virtualAccountId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LicenseSummary];
      return this.apiClient.callApi(
        '/licensing/api/v8/licensing/api/v8/licenses/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a filtered list of licenses.
     * @param {String} smartAccountId Smart Account Identifier
     * @param {String} virtualAccountId Virtual Account Identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LicenseSummary>}
     */
    getLicensesList(smartAccountId, virtualAccountId) {
      return this.getLicensesListWithHttpInfo(smartAccountId, virtualAccountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
