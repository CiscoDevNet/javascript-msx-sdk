/**
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BillingCostsReport from '../model/BillingCostsReport';
import BillingEvent from '../model/BillingEvent';
import BillingEventsPage from '../model/BillingEventsPage';
import Error from '../model/Error';

/**
* BillingEvents service.
* @module api/BillingEventsApi
* @version 1.0.9
*/
export default class BillingEventsApi {

    /**
    * Constructs a new BillingEventsApi. 
    * @alias module:api/BillingEventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve a summary for tenant cost.
     * Needs VIEW_COSTS permission to view cost details.
     * @param {String} tenantId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.fromDate 
     * @param {Date} opts.toDate 
     * @param {String} opts.groupBy 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BillingCostsReport} and HTTP response
     */
    getCostSummaryWithHttpInfo(tenantId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getCostSummary");
      }

      let pathParams = {
      };
      let queryParams = {
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'groupBy': opts['groupBy'],
        'tenantId': tenantId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BillingCostsReport;
      return this.apiClient.callApi(
        '/billing/api/v8/events/costs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a summary for tenant cost.
     * Needs VIEW_COSTS permission to view cost details.
     * @param {String} tenantId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.fromDate 
     * @param {Date} opts.toDate 
     * @param {String} opts.groupBy 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BillingCostsReport}
     */
    getCostSummary(tenantId, opts) {
      return this.getCostSummaryWithHttpInfo(tenantId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an Event.
     * Needs VIEW_EVENTS permission to get a billing event.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BillingEvent} and HTTP response
     */
    getEventWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEvent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BillingEvent;
      return this.apiClient.callApi(
        '/billing/api/v8/events/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an Event.
     * Needs VIEW_EVENTS permission to get a billing event.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BillingEvent}
     */
    getEvent(id) {
      return this.getEventWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a page of events for tenant.
     * Needs VIEW_EVENTS permission to view the billing events.
     * @param {String} tenantId 
     * @param {Number} page 
     * @param {Number} pageSize 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.fromDate 
     * @param {Date} opts.toDate 
     * @param {String} opts.type 
     * @param {String} opts.subtype 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BillingEventsPage} and HTTP response
     */
    getEventsPageWithHttpInfo(tenantId, page, pageSize, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getEventsPage");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getEventsPage");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling getEventsPage");
      }

      let pathParams = {
      };
      let queryParams = {
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'type': opts['type'],
        'subtype': opts['subtype'],
        'tenantId': tenantId,
        'page': page,
        'pageSize': pageSize
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BillingEventsPage;
      return this.apiClient.callApi(
        '/billing/api/v8/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a page of events for tenant.
     * Needs VIEW_EVENTS permission to view the billing events.
     * @param {String} tenantId 
     * @param {Number} page 
     * @param {Number} pageSize 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.fromDate 
     * @param {Date} opts.toDate 
     * @param {String} opts.type 
     * @param {String} opts.subtype 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BillingEventsPage}
     */
    getEventsPage(tenantId, page, pageSize, opts) {
      return this.getEventsPageWithHttpInfo(tenantId, page, pageSize, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
