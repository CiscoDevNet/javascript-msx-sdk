/**
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import VulnerabilitiesRegistrationPage from '../model/VulnerabilitiesRegistrationPage';
import VulnerabilityRegistration from '../model/VulnerabilityRegistration';
import VulnerabilityRegistrationCreate from '../model/VulnerabilityRegistrationCreate';

/**
* Registration service.
* @module api/RegistrationApi
* @version 1.0.9
*/
export default class RegistrationApi {

    /**
    * Constructs a new RegistrationApi. 
    * @alias module:api/RegistrationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete a registration.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRegisteredProductVersionWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRegisteredProductVersion");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vulnerability/api/v8/vulnerabilities/registrations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a registration.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRegisteredProductVersion(id) {
      return this.deleteRegisteredProductVersionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a filtered page of registered products / versions.
     * @param {Number} page 
     * @param {Number} pageSize 
     * @param {Object} opts Optional parameters
     * @param {String} opts.product Product identifier (as defined in NIST's CPE dictionary) to filter by.
     * @param {String} opts.version Product version (as defined in NIST's CPE dictionary) filter to filter by.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VulnerabilitiesRegistrationPage} and HTTP response
     */
    getRegisteredProductVersionPageWithHttpInfo(page, pageSize, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getRegisteredProductVersionPage");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling getRegisteredProductVersionPage");
      }

      let pathParams = {
      };
      let queryParams = {
        'product': opts['product'],
        'version': opts['version'],
        'page': page,
        'pageSize': pageSize
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VulnerabilitiesRegistrationPage;
      return this.apiClient.callApi(
        '/vulnerability/api/v8/vulnerabilities/registrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a filtered page of registered products / versions.
     * @param {Number} page 
     * @param {Number} pageSize 
     * @param {Object} opts Optional parameters
     * @param {String} opts.product Product identifier (as defined in NIST's CPE dictionary) to filter by.
     * @param {String} opts.version Product version (as defined in NIST's CPE dictionary) filter to filter by.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VulnerabilitiesRegistrationPage}
     */
    getRegisteredProductVersionPage(page, pageSize, opts) {
      return this.getRegisteredProductVersionPageWithHttpInfo(page, pageSize, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Register a product / verison combination for vulnerability inspection.
     * @param {module:model/VulnerabilityRegistrationCreate} vulnerabilityRegistrationCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VulnerabilityRegistration} and HTTP response
     */
    registerProductVersionWithHttpInfo(vulnerabilityRegistrationCreate) {
      let postBody = vulnerabilityRegistrationCreate;
      // verify the required parameter 'vulnerabilityRegistrationCreate' is set
      if (vulnerabilityRegistrationCreate === undefined || vulnerabilityRegistrationCreate === null) {
        throw new Error("Missing the required parameter 'vulnerabilityRegistrationCreate' when calling registerProductVersion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VulnerabilityRegistration;
      return this.apiClient.callApi(
        '/vulnerability/api/v8/vulnerabilities/registrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Register a product / verison combination for vulnerability inspection.
     * @param {module:model/VulnerabilityRegistrationCreate} vulnerabilityRegistrationCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VulnerabilityRegistration}
     */
    registerProductVersion(vulnerabilityRegistrationCreate) {
      return this.registerProductVersionWithHttpInfo(vulnerabilityRegistrationCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
