/**
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import SmartAccountType from '../model/SmartAccountType';
import SmartUserAccounts from '../model/SmartUserAccounts';

/**
* LicensingAccounts service.
* @module api/LicensingAccountsApi
* @version 1.0.9
*/
export default class LicensingAccountsApi {

    /**
    * Constructs a new LicensingAccountsApi. 
    * @alias module:api/LicensingAccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns a filtered page of smart accounts.
     * @param {String} userId User Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.domain Smart Account domain
     * @param {String} opts.roleName Role Name
     * @param {module:model/SmartAccountType} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartUserAccounts} and HTTP response
     */
    getUserAccountsListWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserAccountsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'userId': userId,
        'domain': opts['domain'],
        'roleName': opts['roleName'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartUserAccounts;
      return this.apiClient.callApi(
        '/licensing/api/v8/accounts/smart/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a filtered page of smart accounts.
     * @param {String} userId User Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.domain Smart Account domain
     * @param {String} opts.roleName Role Name
     * @param {module:model/SmartAccountType} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartUserAccounts}
     */
    getUserAccountsList(userId, opts) {
      return this.getUserAccountsListWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
