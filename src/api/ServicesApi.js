/**
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import LegacyServiceOrder from '../model/LegacyServiceOrder';
import LegacyServiceOrderResponse from '../model/LegacyServiceOrderResponse';
import Service from '../model/Service';
import ServiceUpdate from '../model/ServiceUpdate';
import ServicesPage from '../model/ServicesPage';

/**
* Services service.
* @module api/ServicesApi
* @version 1.0.9
*/
export default class ServicesApi {

    /**
    * Constructs a new ServicesApi. 
    * @alias module:api/ServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Deletes a service.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteServiceWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/manage/api/v8/services/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a service.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteService(id) {
      return this.deleteServiceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a service.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Service} and HTTP response
     */
    getServiceWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/manage/api/v8/services/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a service.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Service}
     */
    getService(id) {
      return this.getServiceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a page of services.
     * @param {Number} page 
     * @param {Number} pageSize 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.tenantIds 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServicesPage} and HTTP response
     */
    getServicesPageWithHttpInfo(page, pageSize, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getServicesPage");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling getServicesPage");
      }

      let pathParams = {
      };
      let queryParams = {
        'tenantIds': this.apiClient.buildCollectionParam(opts['tenantIds'], 'multi'),
        'page': page,
        'pageSize': pageSize
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServicesPage;
      return this.apiClient.callApi(
        '/manage/api/v8/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a page of services.
     * @param {Number} page 
     * @param {Number} pageSize 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.tenantIds 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServicesPage}
     */
    getServicesPage(page, pageSize, opts) {
      return this.getServicesPageWithHttpInfo(page, pageSize, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submits an order.
     * @param {String} productId 
     * @param {String} offerId 
     * @param {module:model/LegacyServiceOrder} legacyServiceOrder 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LegacyServiceOrderResponse} and HTTP response
     */
    submitOrderWithHttpInfo(productId, offerId, legacyServiceOrder) {
      let postBody = legacyServiceOrder;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling submitOrder");
      }
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling submitOrder");
      }
      // verify the required parameter 'legacyServiceOrder' is set
      if (legacyServiceOrder === undefined || legacyServiceOrder === null) {
        throw new Error("Missing the required parameter 'legacyServiceOrder' when calling submitOrder");
      }

      let pathParams = {
      };
      let queryParams = {
        'productId': productId,
        'offerId': offerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LegacyServiceOrderResponse;
      return this.apiClient.callApi(
        '/manage/api/v8/services', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Submits an order.
     * @param {String} productId 
     * @param {String} offerId 
     * @param {module:model/LegacyServiceOrder} legacyServiceOrder 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LegacyServiceOrderResponse}
     */
    submitOrder(productId, offerId, legacyServiceOrder) {
      return this.submitOrderWithHttpInfo(productId, offerId, legacyServiceOrder)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an order.
     * @param {String} productId 
     * @param {String} offerId 
     * @param {module:model/LegacyServiceOrder} legacyServiceOrder 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LegacyServiceOrderResponse} and HTTP response
     */
    updateOrderWithHttpInfo(productId, offerId, legacyServiceOrder) {
      let postBody = legacyServiceOrder;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling updateOrder");
      }
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling updateOrder");
      }
      // verify the required parameter 'legacyServiceOrder' is set
      if (legacyServiceOrder === undefined || legacyServiceOrder === null) {
        throw new Error("Missing the required parameter 'legacyServiceOrder' when calling updateOrder");
      }

      let pathParams = {
      };
      let queryParams = {
        'productId': productId,
        'offerId': offerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LegacyServiceOrderResponse;
      return this.apiClient.callApi(
        '/manage/api/v8/services', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates an order.
     * @param {String} productId 
     * @param {String} offerId 
     * @param {module:model/LegacyServiceOrder} legacyServiceOrder 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LegacyServiceOrderResponse}
     */
    updateOrder(productId, offerId, legacyServiceOrder) {
      return this.updateOrderWithHttpInfo(productId, offerId, legacyServiceOrder)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a service.
     * @param {String} id 
     * @param {module:model/ServiceUpdate} serviceUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Service} and HTTP response
     */
    updateServiceWithHttpInfo(id, serviceUpdate) {
      let postBody = serviceUpdate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateService");
      }
      // verify the required parameter 'serviceUpdate' is set
      if (serviceUpdate === undefined || serviceUpdate === null) {
        throw new Error("Missing the required parameter 'serviceUpdate' when calling updateService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/manage/api/v8/services/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a service.
     * @param {String} id 
     * @param {module:model/ServiceUpdate} serviceUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Service}
     */
    updateService(id, serviceUpdate) {
      return this.updateServiceWithHttpInfo(id, serviceUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
