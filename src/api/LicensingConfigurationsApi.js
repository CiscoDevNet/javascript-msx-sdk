/**
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import SmartAccountConfiguration from '../model/SmartAccountConfiguration';
import SmartAccountConfigurationCreate from '../model/SmartAccountConfigurationCreate';
import SmartAccountConfigurationUpdate from '../model/SmartAccountConfigurationUpdate';

/**
* LicensingConfigurations service.
* @module api/LicensingConfigurationsApi
* @version 1.0.9
*/
export default class LicensingConfigurationsApi {

    /**
    * Constructs a new LicensingConfigurationsApi. 
    * @alias module:api/LicensingConfigurationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates a smart account configuration.
     * @param {module:model/SmartAccountConfigurationCreate} smartAccountConfigurationCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartAccountConfiguration} and HTTP response
     */
    createSmartAccountConfigurationWithHttpInfo(smartAccountConfigurationCreate) {
      let postBody = smartAccountConfigurationCreate;
      // verify the required parameter 'smartAccountConfigurationCreate' is set
      if (smartAccountConfigurationCreate === undefined || smartAccountConfigurationCreate === null) {
        throw new Error("Missing the required parameter 'smartAccountConfigurationCreate' when calling createSmartAccountConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SmartAccountConfiguration;
      return this.apiClient.callApi(
        '/licensing/api/v8/configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a smart account configuration.
     * @param {module:model/SmartAccountConfigurationCreate} smartAccountConfigurationCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartAccountConfiguration}
     */
    createSmartAccountConfiguration(smartAccountConfigurationCreate) {
      return this.createSmartAccountConfigurationWithHttpInfo(smartAccountConfigurationCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a smart account configuration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartAccountConfiguration} and HTTP response
     */
    getSmartAccountConfigurationWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartAccountConfiguration;
      return this.apiClient.callApi(
        '/licensing/api/v8/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a smart account configuration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartAccountConfiguration}
     */
    getSmartAccountConfiguration() {
      return this.getSmartAccountConfigurationWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a smart account configuration.
     * @param {module:model/SmartAccountConfigurationUpdate} smartAccountConfigurationUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartAccountConfiguration} and HTTP response
     */
    updateSmartAccountConfigurationWithHttpInfo(smartAccountConfigurationUpdate) {
      let postBody = smartAccountConfigurationUpdate;
      // verify the required parameter 'smartAccountConfigurationUpdate' is set
      if (smartAccountConfigurationUpdate === undefined || smartAccountConfigurationUpdate === null) {
        throw new Error("Missing the required parameter 'smartAccountConfigurationUpdate' when calling updateSmartAccountConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SmartAccountConfiguration;
      return this.apiClient.callApi(
        '/licensing/api/v8/configuration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a smart account configuration.
     * @param {module:model/SmartAccountConfigurationUpdate} smartAccountConfigurationUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartAccountConfiguration}
     */
    updateSmartAccountConfiguration(smartAccountConfigurationUpdate) {
      return this.updateSmartAccountConfigurationWithHttpInfo(smartAccountConfigurationUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
