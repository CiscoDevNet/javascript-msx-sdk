/**
 * MSX SDK
 * MSX SDK client.
 *
 * The version of the OpenAPI document: 1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import WorkflowCategory from '../model/WorkflowCategory';
import WorkflowCategoryCreate from '../model/WorkflowCategoryCreate';
import WorkflowCategoryUpdate from '../model/WorkflowCategoryUpdate';

/**
* WorkflowCategories service.
* @module api/WorkflowCategoriesApi
* @version 1.0.9
*/
export default class WorkflowCategoriesApi {

    /**
    * Constructs a new WorkflowCategoriesApi. 
    * @alias module:api/WorkflowCategoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates a new workflow category.
     * @param {String} tenantId 
     * @param {module:model/WorkflowCategoryCreate} workflowCategoryCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkflowCategory} and HTTP response
     */
    createWorkflowCategoryWithHttpInfo(tenantId, workflowCategoryCreate) {
      let postBody = workflowCategoryCreate;
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling createWorkflowCategory");
      }
      // verify the required parameter 'workflowCategoryCreate' is set
      if (workflowCategoryCreate === undefined || workflowCategoryCreate === null) {
        throw new Error("Missing the required parameter 'workflowCategoryCreate' when calling createWorkflowCategory");
      }

      let pathParams = {
      };
      let queryParams = {
        'tenantId': tenantId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowCategory;
      return this.apiClient.callApi(
        '/workflow/api/v8/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new workflow category.
     * @param {String} tenantId 
     * @param {module:model/WorkflowCategoryCreate} workflowCategoryCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkflowCategory}
     */
    createWorkflowCategory(tenantId, workflowCategoryCreate) {
      return this.createWorkflowCategoryWithHttpInfo(tenantId, workflowCategoryCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a workflow category.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteWorkflowCategoryWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWorkflowCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workflow/api/v8/categories/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a workflow category.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteWorkflowCategory(id) {
      return this.deleteWorkflowCategoryWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of workflow categories.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tenantId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/WorkflowCategory>} and HTTP response
     */
    getWorkflowCategoriesListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tenantId': opts['tenantId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkflowCategory];
      return this.apiClient.callApi(
        '/workflow/api/v8/categories/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a list of workflow categories.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tenantId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/WorkflowCategory>}
     */
    getWorkflowCategoriesList(opts) {
      return this.getWorkflowCategoriesListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a workflow category.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkflowCategory} and HTTP response
     */
    getWorkflowCategoryWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkflowCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowCategory;
      return this.apiClient.callApi(
        '/workflow/api/v8/categories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a workflow category.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkflowCategory}
     */
    getWorkflowCategory(id) {
      return this.getWorkflowCategoryWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a workflow category.
     * @param {String} id 
     * @param {module:model/WorkflowCategoryUpdate} workflowCategoryUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkflowCategory} and HTTP response
     */
    updateWorkflowCategoryWithHttpInfo(id, workflowCategoryUpdate) {
      let postBody = workflowCategoryUpdate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWorkflowCategory");
      }
      // verify the required parameter 'workflowCategoryUpdate' is set
      if (workflowCategoryUpdate === undefined || workflowCategoryUpdate === null) {
        throw new Error("Missing the required parameter 'workflowCategoryUpdate' when calling updateWorkflowCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowCategory;
      return this.apiClient.callApi(
        '/workflow/api/v8/categories/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a workflow category.
     * @param {String} id 
     * @param {module:model/WorkflowCategoryUpdate} workflowCategoryUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkflowCategory}
     */
    updateWorkflowCategory(id, workflowCategoryUpdate) {
      return this.updateWorkflowCategoryWithHttpInfo(id, workflowCategoryUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
